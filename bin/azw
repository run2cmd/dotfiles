#!/bin/bash

MODE=$1

run_command() {
  echo "Command: ${*}"
  echo ""
  "$@"
}

current_sub=$(az account show --query name)
echo "Using ${current_sub} subscription"

subscriptions() {
  echo "List subscriptions"
  run_command az account list --query [].[name,id]
}

storage_accounts() {
  echo "List storage accounts"
  run_command az storage account list --query [].name
}

storage_containers() {
  echo "List containers on ${1}"
  run_command az storage container list --account-name ${1} --auth-mode login --query [].name
}

storage_blobs() {
  echo "List blobs on ${1} in container ${2}"
  run_command az storage blob list --account-name ${1} --auth-mode login --container-name ${2} --query [].name
}

resources() {
  echo "List all resources"
  run_command az resource list --query [].name
}

aks() {
  echo "List AKS"
  run_command az aks list --query [].name
}

set_sub() {
  echo "Set subscription ${1}"
  run_command az account set --subscription ${1}
}

acr_registries() {
  echo "List container registires"
  run_command az acr list --query [].name
}

acr_cache() {
  echo "List ACR cache for ${1}"
  run_command az acr cache list --registry ${1} --query [].name
}

acr_repo() {
  echo "List ACR repository for ${1} registry"
  run_command az acr repository list --name ${1}
}

sshuttle() {
  product=$1
  environment=$2
  script_path=/code/${product}-lpc-l1-azure-envs/scripts/sshuttle-admin-${environment}.sh
  if [ -e $script_path ] ; then
    cd $(dirname $script_path)
    echo "Open tunnel with: ${script_path}"
    if pgrep tmux &> /dev/null ;then tmux rename-window "sshuttle-${product}-${environment}" ;fi
    $script_path
    if pgrep tmux &> /dev/null ;then tmux rename-window "bash" ;fi
  else
    echo "Script ${script_path} not found"
  fi
}

ssh_vm() {
  ip_address=$1
  ssh_file=/tmp/sshconfig
  if [ ! -e ${ssh_file} ] || [ $((($(date +%s) - $(date -r ${ssh_file} +%s))/60)) -gt 50 ] ;then
    az ssh config --file ${ssh_file} --ip \* --overwrite
  fi
  echo "SSH to ${ip_address} using ${ssh_file}"
  ssh -F ${ssh_file} ${ip_address}
}

list_keyvaults() {
  echo "List keyvaults"
  run_command az keyvault list --query "[].name"
}

list_keyvault_secrets() {
  echo "List secrets for ${1} keyvault"
  run_command az keyvault secret list --vault-name ${1} --query "[].name"
}

show_keyvault_secret_value() {
  echo "Show secret ${2} for keyvault ${1}"
  run_command az keyvault secret show --vault-name ${1} --name ${2} --query "[name, value]"
}

case $MODE in
  subs) subscriptions ;;
  set-sub) set_sub $2 ;;
  str-storage) storage_accounts ;;
  str-blobs) storage_blobs $2 $3 ;;
  str-con) storage_containers $2 ;;
  acr-regs) acr_registries ;;
  acr-cache) acr_cache $2 ;;
  acr-repo) acr_repo $2 ;;
  resources) resources ;;
  aks) aks ;;
  tunnel) sshuttle $2 $3 ;;
  ssh) ssh_vm $2 ;;
  kvs) list_keyvaults ;;
  kv-secrets) list_keyvault_secrets $2 ;;
  kv-secret-show) show_keyvault_secret_value $2 $3 ;;
  *) echo '
    Usage: azw [mode] [mode_parameters]
    
    You need to login to Azure using `az login` command

    Modes:
      subs - List available subscriptions
      set-sub - Set subscription, params: $1=subscription_name
      str-storage - List storage accounts
      str-blobs - List blobs, params: $1=storage_account, $2=container_name
      str-cont - List containers, params: $1=storage_account
      acr-regs - List container registires
      acr-cache - List ACR caches, params: $1=registry_name
      acr-repo - List ACR repository, params: $1=registry_name
      aks - List AKS instances
      resources - List all resources
      tunnel - Open tunnel for environment using sshuttle, params: $1=product_name, $2=environment
      ssh - SSH to resource in Azure, params: $1=ip_address
      kvs - List keyvaults
      kv-secrets - List secrets for keyvault, params $1=keyvault_name
      kv-secret-show - Show secret vaule, params: $1=keyvault_name, $2=secret_name
    '
esac
