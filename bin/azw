#!/bin/bash

#set -o xtrace

MODE=$1

run_command() {
  (
    set -x
    "$@"
  )
}

jq_array() {
  echo "$@" | jq -c .[]
}

txrw() {
  if pgrep tmux &> /dev/null ;then tmux rename-window $1 ;fi
}

current_sub=$(az account show --query name)
echo "Using ${current_sub} subscription"

storage() {
  PS3="Choice: "

  echo "Choose storage account"
  accounts="$(az storage account list --query [].name)"
  readarray -t acc_array < <(jq_array $accounts)
  select acc_opt in "${acc_array[@]}" ;do
    case "${acc_opt}" in
      *)
        containers="$(az storage container list --account-name ${acc_opt//\"/} --auth-mode login --query [].name)"
        break
      ;;
    esac
  done

  echo "Choose container"
  readarray -t cont_array < <(jq_array $containers)
  select cont_opt in "${cont_array[@]}" ;do
    case "${cont_opt}" in
      *)
        run_command az storage blob list --account-name ${acc_opt//\"/} --auth-mode login --container-name ${cont_opt//\"/} --query "[].[name, properties.lastModified]"
        break
      ;;
    esac
  done
}

resources() {
  echo "List all resources"
  run_command az resource list --query [].name
}

vm_info() {
  PS3="Choice: "

  echo "Choose virtual machine:"
  vms="$(az vm list --query [].name)"
  readarray -t vm_array < <(jq_array $vms)
  select opt in "${vm_array[@]}" ;do
    case "${opt}" in
      *)
        vm_rg="$(az vm list --query "[?name=='${opt//\"/}'].resourceGroup" --output tsv)"
        run_command az vm list-ip-addresses --resource-group ${vm_rg} --name ${opt//\"/}
        break ;;
    esac
  done
}

aks() {
  echo "List AKS"
  run_command az aks list --query [].name
}

set_subscription() {
  PS3="Choice: "

  echo "Choose subscription:"
  subs="$(az account list --query [].[name])"
  readarray -t sub_array < <(jq_array $subs)
  select opt in "${sub_array[@]}" ;do
    case "${opt}" in
      *) run_command az account set --subscription $(echo $opt | jq .[0] |sed 's/"//g') && break ;;
    esac
  done
}

acr() {
  PS3="Choice: "

  echo "Chose registry:"
  registries="$(az acr list --query [].name)"
  readarray -t acr_array < <(jq_array $registries)
  select reg_opt in "${acr_array[@]}" ;do
    case "${reg_opt}" in
      *) reg="${reg_opt//\"/}" && break ;;
    esac
  done

  echo "Choose acr mode:"
  select mode_opt in cache repository ;do
    case "${mode_opt}" in
      cache) run_command az acr cache list --registry ${reg} --query [].name && break ;;
      repository) repos=$(az acr repository list --name ${reg}) && break ;;
    esac
  done

  if [ "${mode_opt}" = "repository" ] ;then
    echo "Choose repo:"
    readarray -t repos_array < <(jq_array $repos)
    select repo in "${repos_array[@]}" ;do
      case "${repo}" in
        *)
          _repo=${repo//\"/}
          info="$(az acr repository show --name ${reg} --repository ${_repo} --query '{imageName:imageName, lastUpdateTime:lastUpdateTime}')"
          tags="$(az acr repository show-tags -n ${reg} --repository ${_repo})"
          echo "${info}, tags: ${tags}"
          break ;;
      esac
    done
  fi
}

sshuttle() {
  product=$1
  environment=$2
  script_path=/code/${product}-lpc-l1-azure-envs/scripts/sshuttle-admin-${environment}.sh
  if [ -e $script_path ] ; then
    cd $(dirname $script_path)
    echo "Open tunnel with: ${script_path}"
    txrw "sshuttle-${product}-${environment}"
    $script_path
  else
    echo "Script ${script_path} not found"
  fi
}

ssh_vm() {
  ip_address=$1
  ssh_file=/tmp/sshconfig
  if [ ! -e ${ssh_file} ] || [ $((($(date +%s) - $(date -r ${ssh_file} +%s))/60)) -gt 50 ] ;then
    az ssh config --file ${ssh_file} --ip \* --overwrite
  fi
  txrw "${ip_address}"
  echo "SSH to ${ip_address} using ${ssh_file}"
  ssh -F ${ssh_file} ${ip_address}
  txrw "bash"
}

keyvaults() {
  vaults="$(az keyvault list --query [].name)"
  PS3="Choice: "

  echo "Choose keyvault:"
  readarray -t vault_array < <(jq_array $vaults)
  select key_opt in "${vault_array[@]}" ;do
    case "${key_opt}" in
      *) secrets="$(az keyvault secret list --vault-name ${key_opt//\"/} --query [].name)" && break ;;
    esac
  done

  echo "Choose secret:"
  readarray -t sec_array < <(jq_array $secrets)
  select sec_opt in "${sec_array[@]}" ;do
    case "${sec_opt}" in
      *) run_command az keyvault secret show --vault-name ${key_opt//\"/} --name ${sec_opt//\"/} --query "[name, value]" && break ;;
    esac
  done
}

pipelines() {
  az devops configure -l | grep organization || (echo "Please setup default organization with: az devops configure --defaults organization=https://dev.azure.com/<org-name>/" && exit 1)
  PS3="Choice: "

  echo "Choose project:"
  projects="$(az devops project list --query value[].name)"
  readarray -t project_array < <(jq_array ${projects})
  select project_opt in "${project_array[@]}" ;do
    case "${project_opt}" in
      *)
        project_name="${project_opt//\"/}"
        pipelines="$(az pipelines list --project "${project_name}" --query "[].[name, path, id]")"
        break ;;
    esac
  done

  echo "Choose pipeline:"
  readarray -t pipeline_array < <(jq_array ${pipelines})
  select pipeline_opt in "${pipeline_array[@]}" ;do
    case "${pipeline_opt}" in
      *)
        pipeline_id=$(echo $pipeline_opt | cut -d"," -f3 | sed 's/]//')
        run_command az pipelines runs list --project "${project_name}" --pipeline-ids ${pipeline_id} --query "[].{SourceBranch:sourceBranch, BuildNumber:buildNumber, StartTime:startTime, Status:status, Result:result}" --output table
        break ;;
    esac
  done
}

az_login() {
  az login --use-device-code
}

port_forward() {
  local_port=$1
  destination_ip=$2
  destination_port=$3
  txrw "tunnel-${local_port}:${destination_ip}:${destination_port}"
  echo "Open local port ${local_port} to point to ${destination_ip}:${destination_port}. For Docker/k8s use 'host.docker.internal' to reach host IP"
  echo "CTRL + C to stop"
  nc -l -k -p $local_port -c "nc ${destination_ip} ${destination_port}"
}

case $MODE in
  sub) set_subscription ;;
  blobs) storage ;;
  acr) acr ;;
  resources) resources ;;
  aks) aks ;;
  kvs) keyvaults ;;
  tunnel) sshuttle $2 $3 ;;
  ssh) ssh_vm $2 ;;
  pipelines) pipelines ;;
  portfw) port_forward $2 $3 $4 ;;
  login) az_login ;;
  vms) vm_info ;;
  *) echo '
    Usage: azw [mode] [mode_parameters]

    You need to login to Azure using `az login` command

    Modes:
      login - Login with device code
      sub - Set subscription
      blobs - Show blobs in storage container
      acr - Show ACR contents. Supports cache and registry containers
      aks - List AKS instances
      kvs - Show keyvault secret value
      resources - List all resources
      vms - Show information about VM
      pipelines - Show pipeline status
      tunnel - Open tunnel for environment using sshuttle, params: $1=product_name, $2=environment
      ssh - SSH to resource in Azure, params: $1=ip_address
      port_fw - Setup local port forwarding (ncat), params: $1=local_port, $2=dest_ip, $3=dest_port
    '
esac

txrw 'bash'
