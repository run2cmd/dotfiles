#!/bin/bash

#set -o xtrace

MODE=$1

trun() {
  timeout 20 "$@" || echo "Error: Timeout after 20 seconds"
}

run_command() {
  echo "Command: ${*}"
  echo ""
  trun "$@"
}

jq_array() {
  echo "$@" | jq -c .[]
}

current_sub=$(trun az account show --query name)
echo "Using ${current_sub} subscription"

storage() {
  PS3="Choice: "

  echo "Choose storage account"
  accounts="$(trun az storage account list --query [].name)"
  readarray -t acc_array < <(jq_array $accounts)
  select acc_opt in "${acc_array[@]}" ;do
    case "${acc_opt}" in
      *)
        containers="$(trun az storage container list --account-name ${acc_opt//\"/} --auth-mode login --query [].name)"
        break
      ;;
    esac
  done

  echo "Choose container"
  readarray -t cont_array < <(jq_array $containers)
  select cont_opt in "${cont_array[@]}" ;do
    case "${cont_opt}" in
      *)
        run_command az storage blob list --account-name ${acc_opt//\"/} --auth-mode login --container-name ${cont_opt//\"/} --query [].name
        break
      ;;
    esac
  done
}

resources() {
  echo "List all resources"
  run_command az resource list --query [].name
}

aks() {
  echo "List AKS"
  run_command az aks list --query [].name
}

set_subscription() {
  PS3="Choice: "

  echo "Choose subscription:"
  subs="$(trun az account list --query [].[name])"
  readarray -t sub_array < <(jq_array $subs)
  select opt in "${sub_array[@]}" ;do
    case "${opt}" in
      *) run_command az account set --subscription $(echo $opt | jq .[0] |sed 's/"//g') && break ;;
    esac
  done
}

acr() {
  PS3="Choice: "

  echo "Chose registry:"
  registries="$(trun az acr list --query [].name)"
  readarray -t acr_array < <(jq_array $registries)
  select reg_opt in "${acr_array[@]}" ;do
    case "${reg_opt}" in
      *) reg="${reg_opt//\"/}" && break ;;
    esac
  done

  echo "Choose acr mode:"
  select mode_opt in cache repository ;do
    case "${mode_opt}" in
      cache) run_command az acr cache list --registry ${reg} --query [].name && break ;;
      repository) run_command az acr repository list --name ${reg} && break ;;
    esac
  done
}

sshuttle() {
  product=$1
  environment=$2
  script_path=/code/${product}-lpc-l1-azure-envs/scripts/sshuttle-admin-${environment}.sh
  if [ -e $script_path ] ; then
    cd $(dirname $script_path)
    echo "Open tunnel with: ${script_path}"
    if pgrep tmux &> /dev/null ;then tmux rename-window "sshuttle-${product}-${environment}" ;fi
    $script_path
    if pgrep tmux &> /dev/null ;then tmux rename-window "bash" ;fi
  else
    echo "Script ${script_path} not found"
  fi
}

ssh_vm() {
  ip_address=$1
  ssh_file=/tmp/sshconfig
  if [ ! -e ${ssh_file} ] || [ $((($(date +%s) - $(date -r ${ssh_file} +%s))/60)) -gt 50 ] ;then
    az ssh config --file ${ssh_file} --ip \* --overwrite
  fi
  tmux rename-window "${ip_address}"
  echo "SSH to ${ip_address} using ${ssh_file}"
  ssh -F ${ssh_file} ${ip_address}
  tmux rename-window "bash"
}

keyvaults() {
  vaults="$(trun az keyvault list --query [].name)"
  PS3="Choice: "

  echo "Choose keyvault:"
  readarray -t vault_array < <(jq_array $vaults)
  select key_opt in "${vault_array[@]}" ;do
    case "${key_opt}" in
      *) secrets="$(trun az keyvault secret list --vault-name ${key_opt//\"/} --query [].name)" && break ;;
    esac
  done

  echo "Choose secret:"
  readarray -t sec_array < <(jq_array $secrets)
  select sec_opt in "${sec_array[@]}" ;do
    case "${sec_opt}" in
      *) run_command az keyvault secret show --vault-name ${key_opt//\"/} --name ${sec_opt//\"/} --query "[name, value]" && break ;;
    esac
  done
}

pipelines() {
  az devops configure -l | grep organization || (echo "Please setup default organization with: az devops configure --defaults organization=https://dev.azure.com/<org-name>/" && exit 1)
  PS3="Choice: "

  echo "Choose project:"
  projects="$(trun az devops project list --query value[].name)"
  readarray -t project_array < <(jq_array ${projects})
  select project_opt in "${project_array[@]}" ;do
    case "${project_opt}" in
      *)
        project_name="${project_opt//\"/}"
        pipelines="$(trun az pipelines list --project "${project_name}" --query "[].[name, path, id]")"
        break ;;
    esac
  done

  echo "Choose pipeline:"
  readarray -t pipeline_array < <(jq_array ${pipelines})
  select pipeline_opt in "${pipeline_array[@]}" ;do
    case "${pipeline_opt}" in
      *)
        pipeline_id=$(echo $pipeline_opt | cut -d"," -f3 | sed 's/]//')
        runs="$(trun az pipelines runs list --project "${project_name}" --pipeline-ids ${pipeline_id} --query "[].[sourceBranch, id]")"
        break ;;
    esac
  done

  echo "Choose run:"
  readarray -t runs_array < <(jq_array ${runs})
  select run_opt in "${runs_array[@]}" ;do
    case "${run_opt}" in
      *)
        run_id=$(echo $run_opt | cut -d"," -f2 | sed 's/]//')
        run_command az pipelines runs show --project "${project_name}" --id ${run_id} --query "[repository.id, sourceBranch, startTime, status, result]"
        echo "https://dev.azure.com/IGT-Lottery/${project_name// /%20}/_build/results?buildId=${run_id}&view=results"
        break ;;
    esac
  done

}

case $MODE in
  sub) set_subscription ;;
  blobs) storage ;;
  acr) acr ;;
  resources) resources ;;
  aks) aks ;;
  kvs) keyvaults ;;
  tunnel) sshuttle $2 $3 ;;
  ssh) ssh_vm $2 ;;
  pipelines) pipelines ;;
  *) echo '
    Usage: azw [mode] [mode_parameters]

    You need to login to Azure using `az login` command

    Modes:
      sub - Set subscription
      blobs - Show blobs in storage container
      acr - Show ACR contents. Supports cache and registry containers
      aks - List AKS instances
      kvs - Show keyvault secret value
      resources - List all resources
      pipelines - Show pipeline status
      tunnel - Open tunnel for environment using sshuttle, params: $1=product_name, $2=environment
      ssh - SSH to resource in Azure, params: $1=ip_address
    '
esac
